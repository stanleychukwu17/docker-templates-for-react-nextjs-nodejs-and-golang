# Stage 1: Build environment
FROM node:19.4-bullseye as build

# Create a non-root user
RUN addgroup app && adduser -S -G app app
USER app

# Set working directory
WORKDIR /usr/src/app

# Copy package files
COPY --chown=app:app package.json pnpm-lock.yaml ./

# Install pnpm globally
RUN npm install -g pnpm

# Ensure to set the volumes for the pnpm store
RUN pnpm config set store-dir /usr/src/app/.pnpm-store

# Install dependencies
RUN pnpm install --production

# Copy application code
COPY --chown=app:app . ./
# (or) COPY . ./; RUN chown -R app:app ./ 

# Build application (if needed)
RUN pnpm run build

###
# Stage 2: Production environment - from docker
FROM nginxinc/nginxinc/nginx-unprivileged:1.23-alpine-perl

# Copy NGINX configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy built assets from the build stage
COPY --from=build /usr/src/app/build /usr/share/nginx/html

# Set permissions for NGINX user
RUN chown -R nginx:nginx /usr/share/nginx/html

# Start NGINX server, you can override it using your docker-compose.yml file
CMD ["nginx", "-g", "daemon off;"]

# you can build this image using: docker build -f Dockerfile.prod -t my-react-nginx-image .
# or from your docker-compose-prod.yml file



###
# from one teacher on youtube
#FROM nginx
#COPY --from=build /app/build /usr/share/nginx/html
# he used docker-compose-prod.yml file to start the nginx server