version: "3.8" {depending on your docker engine}
services: -{Object}
    <name_of_service>: -{Object}
        image: postgres:16.3-alpine3.20

        build: ./backend or ./server
        or you can also do
        build:
            context: ./frontend
            dockerfile: Dockerfile.prod (or) Dockerfile.dev

        container_name: <name_of_container>
        restart: always {
            The restart: always directive in Docker Compose specifies a restart policy for a container. When set to always, it means that Docker will automatically restart the container if it stops for any reason, such as a crash or manual stop.

            Here's what restart: always does:
            1. Automatic Restart: If the container stops for any reason, Docker automatically restarts it.
            2. High Availability: Ensures high availability of the service by automatically bringing it back online in case of failure.
            3. Fault Tolerance: Helps maintain service continuity by quickly recovering from failures without manual intervention.

            This option is commonly used for critical services or those that need to be highly available. However, it's important to note that using restart: always can mask underlying issues, so it's essential to monitor the container's behavior and investigate the cause of frequent restarts if they occur.

            other options are:
            restart: no
                This means Docker will not restart the container automatically if it stops.
                Useful if you want to control the container lifecycle manually.
            restart: on-failure
                Docker will restart the container only if it exits with a non-zero exit code (indicating an error). You can also specify a maximum number of restart attempts.
                Helps to avoid endless restarts in case of persistent failure.
                -
                restart: on-failure:5 - This will restart the container up to 5 times if it fails.
            restart: unless-stopped
                The container will restart unless explicitly stopped by the user. This means Docker will keep trying to restart it if it crashes, unless you manually stop the container.
                Similar to always, but with the option to manually stop it without Docker trying to restart it.
        }
    
        depends_on: -[Array]
            - db
            - backend

        ports: -[Array]
            - "4000:4000" or "8080:3000"

        volumes: -[Array]
            - ./api:/app                        {binding mount for live changes}
            - ./logs:/app/logs                  {binding mount for storing data}
            - users-data:/app/data/users-data   {named volume for storing users data}

        environment: -{Object}
            POSTGRES_USER: <username>
            POSTGRES_PASSWORD: <password>
            POSTGRES_DB: <database>
            or an [Array]
            - POSTGRES_USER=<username>
            - POSTGRES_PASSWORD=<password>
            - POSTGRES_DB=<database>


        env_file:                               # if you prefer using the .env file for environment variables, you can do the below:
            - ./backend/.env                    {i.e <path_to_the_env_file>}

        hostname: <name_of_service> or <your_own_custom_name> {if you do not specify a hostname, docker will use <name_of_service> as the default hostname}
        NOTE: no need for a hostname - here is what docker has to say about it:
            That makes sense not to add a hostname. If Docker Compose's has automatic service name resolution, it simplifies the configuration and avoids the need for manually specifying hostname's.
            Hereâ€™s a brief summary of how Docker Compose handles service names and networking by default:
            1. Service Names as Hostname: Docker Compose automatically uses the service name as the hostname for inter-service communication. For example, if you have services named web and db, they can communicate using these names directly.
            2. Built-in DNS: Docker Compose sets up a default network for your services and includes DNS resolution. This allows services to refer to each other by name.

        networks:                               {if you want to use a custom network}
            - <myNetwork>

        command: ./docker-entrypoint.sh         {The command runs once the container has been started, it is the same with CMD in your Dockerfile, this will override your CMD command}
        entrypoint: ./docker-entrypoint.sh      {it is same as using ENTRYPOINT in your Dockerfile, this will override your entrypoint command}

        stdin_open: true                        {if true, a bash/sh terminal will be open separately for this container}
        tty: true                               {if true, the above terminal opened will be interactive and will be able to take input and return outputs}

        deploy:                                 {i know nothing about this for now, but later on, i will research on the topic and provide you a more detailed explanation}
            restart_policy:
                condition: on-failure
volumes:
    users-data:
    {
        the volumes section is used to define named volumes that can be referenced by services in the services section. These named volumes are created and managed by Docker itself.
        The line above `users-data` is defining a named volume. These named volumes are just placeholders, and their values are not specified in the docker-compose.yml file. Docker Compose automatically creates volumes with
        these names
    }

networks:       {define your custom networks here and tell it what you want it to be}
  <myNetwork>:
    driver: bridge